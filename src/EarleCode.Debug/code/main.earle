#include _utils;

drop(v)
{
}

methoda()
{
	methodb();
}

methodb()
{
	thread giveacallto(methodc);
}

methodc()
{
	methodd();
}

methodd()
{
	//printstacktrace();
}

init()
{
	for(i=0;i<10000;i++)
		intr();
}
intr()
{
	drop("test test test");
	drop("test test test");
	drop("test test test");
	drop("test test test");
	drop("test test test");
	drop("test test test");
	drop("test test test");
	drop("test test test");

	methoda();
	drop(_utils::giveTrue());

	// test order of operations
	drop(4 << 1 + 1);//16
    drop(4 | 1 << 1 + 1);//4
    drop(4 * 3 == 12);//true
    drop(3 & 1 | 2 << 2);//9
    drop(1 < 3 == 3 < 1);//false

	a = 4;

	a = a + 10 / 2.5;
	drop("test: " + a);

	setactivelanguage("LANG_DUTCH");

	switch(a)
	{
		case 12:
			print(@"TEST_TWELVE");
			break;
		case 13:
			print(@"TEST_THIRTEEN");
			break;
		case 14:
			print(@"TEST_FOURTEEN");
			break;
		case 15:
			print(@"TEST_FIFTEEN");
	 		break;
		case 16:
			print(@"TEST_SIXTEEN");
			break;
	}

	return;
	level thread bleep();

	for(i=0;i<5;i++)
	{
		wait .5;
		level notify("wait done");
	}

	level notify("all done");

}

bleep()
{
	
	self endon("all done");

	for(;;)
	{
		print("Bleep!");
		val = self waittill("wait done");
	}
}
